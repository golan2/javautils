#!/bin/bash

if test "$#" -ne 2 -o "$1" == --help ; then
    echo "Usage: $(echo $0 | sed 's#.*/##g') <type> <package>

Creates a simple typed map for the specified primitive type."
    exit
fi

type=$1
package=$2
capitalizedType="$(echo $type | sed 's#^\(.\)\(.*\)$#\1#g' | tr '[:lower:]' '[:upper:]')$(echo $type | sed 's#^\(.\)\(.*\)$#\2#g')"

holderType="${capitalizedType}Holder"
mapType="ObjectTo${capitalizedType}Map"

echo \
"package $package;

import java.util.Map;
import javautils.holders.$holderType;
$(if test $package != javautils.maps ; then echo 'import javautils.maps.AbstractTypedMap;' ; fi)

/**
 * <p>Map from objects to $type-values. {@link $holderType}-objects are
 * used for storing the values in the map.</p>
 */
public final class $mapType extends AbstractTypedMap {

  // Warning: This file was generated by the $(echo $0 | sed 's#.*/##g')
  // script. It is probably more productive to extend the script rather
  // than edit this code directly.

  /**
   * <p>A new map based on the map type used by {@link
   * AbstractTypedMap#AbstractTypedMap}.</p>
   */
  public $mapType() {}

  /**
   * <p>A new <code>Object->$type</code> map using the given map. The
   * given map must not contain any values that are not {@link
   * $holderType}-objects. The given map should also never be modified
   * except by using the services of this class.</p>
   */
  public $mapType(Map map) {
    super(map);
  }

  /**
   * <p>Tests that the value is a non <code>null</code> {@link
   * $holderType}-object.</p>
   */
  protected boolean valuePredicate(Object value) {
    return null != value && value instanceof $holderType;
  }

  /**
   * <p>Associates the key with the specified value. Will not create a new
   * holder if the key is already associated with a value.</p>
   */
  public void put(Object key, $type value) {
    $holderType holder = holder(key);

    if (null == holder)
      put(key, new $holderType(value));
    else
      holder.value = value;
  }

  /**
   * <p>Associates the key with the specified holder.</p>
   */
  public void put(Object key, $holderType holder) {
    assert null != holder;
    map.put(key, holder);
  }

  /**
   * <p>The value associated with the key - throws an assertion exception
   * if the key is not associated with a value.</p>
   */
  public $type get(Object key) {
    return ref(key).value;
  }

  /**
   * <p>The value associated with the key <i>or</i> the specified
   * alternative value if the key is not associated with any value.</p>
   */
  public $type getOr(Object key, $type alternative) {
    $holderType result = holder(key);
    return null != result ? result.value : alternative;
  }

  /**
   * <p>The holder associated with the key - throws an assertion exception
   * if the key is not associated with a value.</p>
   */
  public $holderType ref(Object key) {
    $holderType holder = holder(key);
    assert null != holder;
    return holder;
  }

  /**
   * <p>The holder associated with the key or a new holder that holds the
   * specified value and associated with the key.</p>
   */
  public $holderType refOr(Object key, $type value) {
    $holderType holder = holder(key);
    if (null == holder) {
      holder = new $holderType(value);
      map.put(key, holder);
    }
    return holder;
  }

  /**
   * <p>The holder of the value associated with the key or null if the key
   * is not associated with a value.</p>
   */
  public $holderType holder(Object key) {
    return ($holderType)map.get(key);
  }
}"
